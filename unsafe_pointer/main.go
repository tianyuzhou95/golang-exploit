package main

import (
	"fmt"
	"unsafe"
)

var global int

const constNum = 10

func changeRetAddr() {
	var input uint64
	var inAddr uint

	fmt.Printf("&g() = 0x%x, global_addr = 0x%x\n", g, &global)
	fmt.Println("you have to get return addr by yourself!")
	fmt.Printf("input addr:")
	fmt.Scanf("%d", &inAddr)
	fmt.Printf("input new value: ")
	fmt.Scanf("%d", &input)
	unsafePtr := unsafe.Pointer(uintptr(inAddr))

	// maybe change a series(enough) bytes can garantee to overwrite ret addr
	//
	// arr := (*[500]int)(unsafePtr)
	// for i := 0; i < 500; i++ {
	//     (*arr)[i] = input
	// }

	uintPtr := (*uint64)(unsafePtr)
	*uintPtr = input
}

func changeConst() {
	var inAddr uint
	fmt.Println("you have to get const variable addr by yourself!")
	fmt.Printf("input addr:")
	fmt.Scanf("%d", &inAddr)
	unsafePtr := unsafe.Pointer(uintptr(inAddr))
	fmt.Println("const constNum = ", constNum)
	intPtr := (*int)(unsafePtr)
	*intPtr = 100
	fmt.Println("After change, const constNum = ", constNum)
}

// sign function of attack succeed
func g() {
	fmt.Println("Congratulations!")
}

func main() {
	global = 10
	// changeRetAddr()
	changeConst()
}

// &b5 = 0xc00009eed8
// &b2 = 0xc00009ee78
// &ptr = 0xc00009ee98

// main next ins = 0x00000000004892a0
//           g() = 0x0000000000489280

// rsp = 0xc000088f18

// ret addr = 0xc00009ef80
